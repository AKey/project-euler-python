""" Highly divisible triangular number
Problem 12
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

Answer: 76576500

"""
import math


def get_factors(number):
    factors = []
    for i in range(1, int(math.sqrt(number) + 1)):
        if number % i == 0:
            factors.append(i)
            factors.append(number // i)
    # This is just so the list looks nice
    factors.sort()
    return factors

def get_triangle_number(number):
    return sum(range(number + 1))

def get_triangle_with_divisors(target):
    divisors = 0
    triangle_index = 1
    triangle_number = 0
    while divisors <= target:
        triangle_index += 1
        triangle_number = get_triangle_number(triangle_index)
        divisors = len(get_factors(triangle_number))
    return triangle_number

print(get_triangle_with_divisors(500))